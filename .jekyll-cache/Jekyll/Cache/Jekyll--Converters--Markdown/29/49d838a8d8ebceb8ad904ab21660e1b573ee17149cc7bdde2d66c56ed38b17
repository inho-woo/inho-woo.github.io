I"(8<p>이번에는 Node.js에서 사용하는 Webpack에 대해 알아보았다.</p>

<h3 id="webpack은-무엇인가">Webpack은 무엇인가?</h3>

<p><img width="778" alt="스크린샷 2021-12-19 오후 12 46 13" src="https://user-images.githubusercontent.com/58337935/146663174-7ced4575-4b2c-4595-a309-db4185a02b38.png" /></p>

<p>웹 페이지는 수 많은 구성요소로 이루어져 있는데 기본적인 html, js, css 파일 외에도, 웹폰트, favicon, 이미지, json 데이터 등등 수 많은 파일들을 받아와야 합니다. 
수많은 파일을 요청함에 있어서 웹페에지의 속도는 느려질수밖에 없다. 그래서 이미지 같은 경우는 번들더를 이용해 js, css 파일을 합쳐서 처리룰 해왔지만 여진히 수많은 파일을 받아와야 했기애 <strong>Webpack</strong> 이라는 번들러가 등장하였다.
하나로 합쳐주면서 크로스 브라우징 대응도 해주고 압축도 해주는 등 여러모로 편한 점이 많습니다. 위의 그림처럼 여러 파일들을 하나로 합쳐준다.
자바스크립트도 번들러를 이용해 import나 require로 js끼리 서로 의존합니다. 특히 노드로 만들다 보면 모듈이 기본 수 백개에서 많게는 수 만개까지 갑니다. 이런 것을 하나의 JS로 합쳐주게 된다.
하나의 파일로 합치기엔 너무 크다면 여러 개의 파일로 나눌 수도 있는데 보통 라이브러리들은 자주 수정되지 않기 때문에 라이브러리만 모아둔 JS 파일 하나를 만들고,
코드 수정이 자주되는 핵심 페이지는 따로 하나 만들어서 두 개의 JS가 생성됩니다.</p>

<p>Webpack 을 사용하기 위해선, 우선 Webpack 모듈을 설치해야한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">npm</span> <span class="nx">i</span> <span class="o">-</span><span class="nx">D</span> <span class="nx">webpack</span> <span class="nx">webpack</span><span class="o">-</span><span class="nx">cli</span></code></pre></figure>

<p>웹팩은 하나의 설정 파일로 모든걸 해결해주기 때문에 <strong>package.json</strong> 경로에  파일을 하나 생성한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>

  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">optimization</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">modules</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">node_modules</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.json</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.jsx</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.css</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">},</span>
<span class="p">};</span></code></pre></figure>

<p>여기서 중요한건 파일이름을 <strong>webpack.config.js</strong> 로 생성을 해줘야한다는것이다.
왜냐하면 이름을 <strong>webpack.config.js</strong> 로 설정을 하면 웹팩이 바로 인식을 하기 떄문이다. 
이름을 다르게 하고 싶다면  명령 프롬프트에서 실행할 때 <strong>webpack –config 다른파일이름.js</strong> 라고 <strong>–config</strong> 플래그를 사용해 경로를 알려주면 다른 이름으로도 사용이 가능하다.</p>

<p>핵심적인 부분은 <strong>entry, output, module, plugins</strong> 이 4개라고 생각하면 된다.</p>

<h2 id="entry">entry</h2>
<p>웹팩이 파일을 읽어들이기 시작하는 부분이다. app이 객체의 키로 설정되어 있는데 이 부분 이름은 본인이 설정한 js 파일경로를 선언해주면 된다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="nl">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="dl">'</span><span class="s1">파일 경로</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">app2</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">파일경로</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>여러 js를 만들고 싶을 때 따로 구분만 지어주면 된다. 보통 멀티페이지 웹사이트에서 위와 같이 entry를 여러 개 넣어주면 된다.</p>

<p>하나의 entry 파일에 여러 파일을 넣고 싶으면 <strong>배열</strong> 을 사용해 선언해주면 된다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="nl">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">app.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">app2.js</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">},</span>
<span class="p">}</span></code></pre></figure>

<p>위의 경우는 app.js랑 app2.js가 한 파일로 엮여 app.js라는 결과물로 나오개 된다.
이렇게 웹팩은 entry의 js 파일부터 시작해서 import, require 관계로 묶여진 다른 js, css, json까지 알아서 파악한 뒤 모두 entry에 기재된 키 개수만큼으로 묶어줍니다.</p>

<h2 id="output">output</h2>

<p>output은 결과물이 어떻게 나올지 선언해주는것이다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="nl">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/dist</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[파일이름].js</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">}</span></code></pre></figure>

<p>여기서 path가 2개가 있는걸 볼수있다. (path, publicPath)</p>

<p>path는 output으로 나올 파일이 저장될 경로이고, publicPath는 파일들이 위치할 서버 상의 경로이다. 
filename 은 [파일이름].js라고 되어있는데 이렇게 써줘야 [파일이름]에 entry의 app이나 vendor 문자열이 들어가 app.js, vendor.js로 결과물이 나오기 때문이다.
[파일이름].js가 아니라 <strong>result.js</strong> 라고 적으면 그대로 <strong>result.js</strong> 로 결과물이 나오게 된다.</p>

<h2 id="loader">loader</h2>
<p>loader는 웹팩의 핵심기능중 하나이다. 
웹팩을 사용하면 <strong>babel</strong> 을 주로 같이 사용합니다. ES2015 이상의 문법이나 타입스크립트 그리고 리액트의 JSX같은 문법을 브라우저에서 사용하기 위해서인데 
<strong>IE같은 구형 브라우저랑 호환</strong> 시킬 수도 있ㄷ. babel을 웹팩5와 연결시키기 위해선 우선 모듈설치가 필요허다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">npm</span> <span class="nx">i</span> <span class="o">-</span><span class="nx">D</span> <span class="nx">babel</span><span class="o">-</span><span class="nx">loader</span> <span class="p">@</span><span class="nd">babel</span><span class="sr">/core @babel/</span><span class="nx">preset</span><span class="o">-</span><span class="nx">env</span></code></pre></figure>

<p><strong>babel-loader, @babel/core</strong> 는 필수로 설치를 해야하며 preset-env는 브라우저에 필요한 ecmascript 버전을 자동으로 파악해서 알아서 polyfill을 넣어주는 기능을 제공해준다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="nl">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">[{</span>
      <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">jsx</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span>
      <span class="na">loader</span><span class="p">:</span> <span class="dl">'</span><span class="s1">babel-loader</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">presets</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">[</span>
            <span class="dl">'</span><span class="s1">@babel/preset-env</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
              <span class="na">targets</span><span class="p">:</span> <span class="p">{</span> <span class="na">node</span><span class="p">:</span> <span class="dl">'</span><span class="s1">current</span><span class="dl">'</span> <span class="p">},</span>
              <span class="na">modules</span><span class="p">:</span> <span class="dl">'</span><span class="s1">false</span><span class="dl">'</span><span class="p">,</span>
              <span class="na">useBuiltIns</span><span class="p">:</span> <span class="dl">'</span><span class="s1">usage</span><span class="dl">'</span>
            <span class="p">}</span>
          <span class="p">],</span>
        <span class="p">],</span>
      <span class="p">},</span>
      <span class="na">exclude</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">/node_modules</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">}],</span>
  <span class="p">},</span>
<span class="p">}</span></code></pre></figure>

<p>‘env’ 다음에 target과 modules: false, useBuiltIns: ‘usage’라는 옵션이 들어 있습니다.</p>

<p><strong>target</strong> 은 지원하길 원하는 환경을 적는 곳입니다. 만약, 구 버전 노드 버전을 적어주면 구 버전 문법을 지원하기 위해 polyfill이 추가된다. 노드 대신 브라우저를 타겟으로 할 수도 있습니다.</p>

<p>modules를 <strong>false</strong> 로 해야 최신모듈 시스템이 그대로 유지되어서 트리 쉐이킹이 된다.
ES2015 모듈 시스템에서 import되지 않은 export들을 정리해주는 기능이죠. 용량이 많이 줄어들기 때문에 꼭 트리 쉐이킹을 사용하는게 좋다. 
단, <strong>모듈 시스템</strong> 을 사용해야하는 클라이언트에서는 쓰면 제대로 처리되지 않을수 있으니 주의해야한다.</p>

<p>useBuiltIns: ‘usage’는 알아서 사용코드를 파악하여 polyfill을 import 시켜준다.
entry 파일 최상단에 import문을 적을 필요가 없고  false는 entry 최상단에 넣은 import문을 그냥 그대로 사용하게되는데 환경에 따라 polyfill을 다르게 적용하지 않게 해주는것이다.</p>

<h2 id="plugin">plugin</h2>
<p>플러그인은 부가적인 기능이다. 다양한 플러그인들이 나와있는데 이를 사용하면 효과적으로 번들링을 할 수 있게된다. 
예를 들면 압축을 한다거나, 핫리로딩을 한다거나, 파일을 복사하는 등의 부수적인 작업을 할 수 있습니다.</p>

<p>마지막으로 <strong>resolve</strong> 는 웹팩이 알아서 경로나 확장자를 처리할 수 있게 도와주는 옵션이다.
modules에 node_modules를 넣어야 디렉토리의 node_modules를 인식할 수 있게되고, extensions에 넣은 확장자들은 웹팩에서 알아서 처리해주기 때문에 파일에 저 확장자들을 입력할 필요가 없다.</p>

<p>이렇게 Webpack에 대해 알아보았다.</p>

<p>막상 이렇게 Node.js 에서 같이 따라가는(?) Webpack 에 대해 공부해보았는데
Node.js 에 비해 아직은 많이 어려운거 같다.
Webpack이라는 강력한 기능을 제대로 사용하기 위해선 보다 공부가 더 필요했다.
아직은 기본적인거만 공부했지만 , 보다 깊에 파고들 필요가 있는 Webpack 이였다.</p>
:ET