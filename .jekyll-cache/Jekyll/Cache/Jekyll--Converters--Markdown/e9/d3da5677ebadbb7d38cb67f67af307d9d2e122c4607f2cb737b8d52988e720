I"<p>현재 레이아웃을 구성하고, 1 Table 화면 개발 , 2 Table 화면 개발진행중에 있다.<br />
1 Table 화면과는 달리 2 Table 화면은 아무래도 이벤트처리가 많다보니 React에 대한 전반적인 이해가
없으면 힘들수밖에 없었다. 그래서 <strong>React Hook</strong> 에 대해 내용을 정리하려한다.</p>

<h3 id="react-hook">React Hook</h3>
<p><strong>React Hook</strong> 은 React 16.8 부터 추가된것으로 Class 바탕으로 코드작성 할 필요없이, 상태값을 통해
React를 활용할 수 있는기능이다.
<strong>React Hook</strong> 은 선택적 사용이 가능해 기존코드를 다시 작성할 필요는 없다. 또한, 호환성이 뛰어나다는 장점을 가지고 있다.
 가장 일반적으로 <strong>State</strong> 가 있으며, 그외에는 [<strong>Effect</strong>, <strong>Context</strong>, <strong>Ref</strong>, <strong>Reducer</strong>, <strong>Callback</strong>, <strong>Memo</strong>] 등등이 있다.<br />
 우선적으로 <strong>State</strong> 에 대해 기록해보려고 한다.</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="kd">const</span> <span class="p">[</span><span class="nx">Count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;</span></code></pre></figure>

<p>가장 기본적인 Count 를 가지고 예시를 들어보았다.<br />
버튼을 클릭시 setCount 를 호출해 count에 새로운 변수를 넣어준다. (컴포넌트 리렌더링)
또한 <strong>State</strong> 는 여러개도 선언이 가능하다. 물론 지켜줘야하는것도 있다.</p>
<ol>
  <li><strong>최상위</strong> 에서만 Hook을 호출해야 한다.<br />
반복문, 조건문, 중첩된 함수 내에서 Hook을 실행시 원하는 값이 안나올수 있다.</li>
  <li>React 함수 컴포넌트 내에서만 Hook을 호출해야 한다.<br />
<strong>일반 JavaScript 함수</strong> 에서는 Hook 호출이 안된다.</li>
</ol>

<p>클래스 컴포넌트의 <strong>this.setState</strong> 와 달리 <strong>state</strong> 를 갱신하는 것은 <strong>병합</strong> 하는 것이 아니라 <strong>대체</strong> 하는 것이라는 것은 알고 넘어가야 한다.</p>

:ET