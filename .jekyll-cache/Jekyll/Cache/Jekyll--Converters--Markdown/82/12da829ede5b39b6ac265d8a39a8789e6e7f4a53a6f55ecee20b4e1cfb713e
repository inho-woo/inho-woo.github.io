I"`<p>이번에는 Node.js에서 사용하는 Webpack에 대해 알아보았다.</p>

<h3 id="webpack은-무엇인가">Webpack은 무엇인가?</h3>

<p><img width="778" alt="스크린샷 2021-12-19 오후 12 46 13" src="https://user-images.githubusercontent.com/58337935/146663174-7ced4575-4b2c-4595-a309-db4185a02b38.png" /></p>

<p>웹 페이지는 수 많은 구성요소로 이루어져 있는데 기본적인 html, js, css 파일 외에도, 웹폰트, favicon, 이미지, json 데이터 등등 수 많은 파일들을 받아와야 합니다. 
수많은 파일을 요청함에 있어서 웹페에지의 속도는 느려질수밖에 없다. 그래서 이미지 같은 경우는 번들더를 이용해 js, css 파일을 합쳐서 처리룰 해왔지만 여진히 수많은 파일을 받아와야 했기애 <strong>Webpack</strong> 이라는 번들러가 등장하였다.
하나로 합쳐주면서 크로스 브라우징 대응도 해주고 압축도 해주는 등 여러모로 편한 점이 많습니다. 위의 그림처럼 여러 파일들을 하나로 합쳐준다.
자바스크립트도 번들러를 이용해 import나 require로 js끼리 서로 의존합니다. 특히 노드로 만들다 보면 모듈이 기본 수 백개에서 많게는 수 만개까지 갑니다. 이런 것을 하나의 JS로 합쳐주게 된다.
하나의 파일로 합치기엔 너무 크다면 여러 개의 파일로 나눌 수도 있는데 보통 라이브러리들은 자주 수정되지 않기 때문에 라이브러리만 모아둔 JS 파일 하나를 만들고,
코드 수정이 자주되는 핵심 페이지는 따로 하나 만들어서 두 개의 JS가 생성됩니다.</p>

<p>Webpack 을 사용하기 위해선, 우선 Webpack 모듈을 설치해야한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">npm</span> <span class="nx">i</span> <span class="o">-</span><span class="nx">D</span> <span class="nx">webpack</span> <span class="nx">webpack</span><span class="o">-</span><span class="nx">cli</span></code></pre></figure>

<p>웹팩은 하나의 설정 파일로 모든걸 해결해주기 때문에 <strong>package.json</strong> 경로에  파일을 하나 생성한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>

  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">optimization</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">modules</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">node_modules</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.json</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.jsx</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.css</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">},</span>
<span class="p">};</span></code></pre></figure>

<p>여기서 중요한건 파일이름을 <strong>webpack.config.js</strong> 로 생성을 해줘야한다는것이다.
왜냐하면 이름을 <strong>webpack.config.js</strong> 로 설정을 하면 웹팩이 바로 인식을 하기 떄문이다. 
이름을 다르게 하고 싶다면  명령 프롬프트에서 실행할 때 <strong>webpack –config 다른파일이름.js</strong> 라고 <strong>–config</strong> 플래그를 사용해 경로를 알려주면 다른 이름으로도 사용이 가능하다.</p>

:ET