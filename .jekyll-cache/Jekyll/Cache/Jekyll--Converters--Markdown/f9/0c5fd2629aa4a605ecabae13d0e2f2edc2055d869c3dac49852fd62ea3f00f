I"V<p>이번에는 Node.js에서 사용하는 Webpack에 대해 알아보았다.</p>

<h3 id="webpack은-무엇인가">Webpack은 무엇인가?</h3>

<p><img width="778" alt="스크린샷 2021-12-19 오후 12 46 13" src="https://user-images.githubusercontent.com/58337935/146663174-7ced4575-4b2c-4595-a309-db4185a02b38.png" /></p>

<p>웹 페이지는 수 많은 구성요소로 이루어져 있는데 기본적인 html, js, css 파일 외에도, 웹폰트, favicon, 이미지, json 데이터 등등 수 많은 파일들을 받아와야 합니다. 
수많은 파일을 요청함에 있어서 웹페에지의 속도는 느려질수밖에 없다. 그래서 이미지 같은 경우는 번들더를 이용해 js, css 파일을 합쳐서 처리룰 해왔지만 여진히 수많은 파일을 받아와야 했기애 <strong>Webpack</strong> 이라는 번들러가 등장하였다.
하나로 합쳐주면서 크로스 브라우징 대응도 해주고 압축도 해주는 등 여러모로 편한 점이 많습니다. 위의 그림처럼 여러 파일들을 하나로 합쳐준다.
자바스크립트도 번들러를 이용해 import나 require로 js끼리 서로 의존합니다. 특히 노드로 만들다 보면 모듈이 기본 수 백개에서 많게는 수 만개까지 갑니다. 이런 것을 하나의 JS로 합쳐주게 된다.
하나의 파일로 합치기엔 너무 크다면 여러 개의 파일로 나눌 수도 있는데 보통 라이브러리들은 자주 수정되지 않기 때문에 라이브러리만 모아둔 JS 파일 하나를 만들고,
코드 수정이 자주되는 핵심 페이지는 따로 하나 만들어서 두 개의 JS가 생성됩니다.</p>

<p>Webpack 을 사용하기 위해선, 우선 Webpack 모듈을 설치해야한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">npm</span> <span class="nx">i</span> <span class="o">-</span><span class="nx">D</span> <span class="nx">webpack</span> <span class="nx">webpack</span><span class="o">-</span><span class="nx">cli</span></code></pre></figure>

<p>웹팩은 하나의 설정 파일로 모든걸 해결해주기 때문에 <strong>package.json</strong> 경로에  파일을 하나 생성한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">output</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="na">filename</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
    <span class="na">publicPath</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">module</span><span class="p">:</span> <span class="p">{</span>

  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">optimization</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">modules</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">node_modules</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.json</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.jsx</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.css</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">},</span>
<span class="p">};</span></code></pre></figure>

<p>여기서 중요한건 파일이름을 <strong>webpack.config.js</strong> 로 생성을 해줘야한다는것이다.
왜냐하면 이름을 <strong>webpack.config.js</strong> 로 설정을 하면 웹팩이 바로 인식을 하기 떄문이다. 
이름을 다르게 하고 싶다면  명령 프롬프트에서 실행할 때 <strong>webpack –config 다른파일이름.js</strong> 라고 <strong>–config</strong> 플래그를 사용해 경로를 알려주면 다른 이름으로도 사용이 가능하다.</p>

<p><strong>const</strong> 는 JavaScript를 공부했던분들이라면 많이 보았을꺼다.</p>

<p>위에서도 설명했듯이 Node.js는 JavaScript를 기반으로 만들어졌기때문에</p>

<p>모듈을 설치후, 선언을 해주기위해 <strong>const</strong> 를 이용해 선언해준다.</p>

<p>물론, <strong>var</strong> , <strong>let</strong> 도 있지만, 이번에 만들어본 프로젝트는</p>

<p>간단하게 작성한거이기 때문에 <strong>const</strong> 로 통일해서 진행하였다.</p>

<p>모듈들을 선언해준뒤, <strong>const app = express()</strong> 를 선언해 express에서 서버일을 진행할수 있도록 한다.</p>

<p>다음, DB를 연결해주기 위해 Connection을 선언해준다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">dbcon</span> <span class="o">=</span> <span class="nx">mysql</span><span class="p">.</span><span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">host</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">user.host</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">user</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">user.id</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">password</span><span class="p">:</span><span class="dl">'</span><span class="s1">user.password</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">database</span><span class="p">:</span><span class="dl">'</span><span class="s1">user.database</span><span class="dl">'</span>
<span class="p">})</span></code></pre></figure>

<p>각 항목에 본인이 설정한 Host(로컬인결우 localhost), 계정정보를 입력한다.</p>

<p>다음으로 bodyParser를 설정해준다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span>
    <span class="na">extended</span><span class="p">:</span><span class="kc">false</span>
<span class="p">}))</span></code></pre></figure>

<p>bodyParser는 post로 요청된 body를 쉽게 추출할 수 있는 모듈로서,</p>

<p>현재 프로젝트에선 <strong>bodyParser.unlencoded</strong> 로 선언한 이유는</p>

<p>Context_Type(jQuery,Ajax의 기본타입) 값을 처리하기위해서 선언했다.</p>

<p><strong>bodyParser.unlencoded</strong>  말고도 <strong>bodyParser.json</strong> , <strong>bodyParser.text</strong> 방법도 있다.</p>

<p>모듈에대한 정리는 따로 하도록 하겠다.</p>

<p>다음으로 서버 Port를 설정한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Server Start : port 3000</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<p><strong>app.listen</strong> 으로 3000번 포트를 바라보게 한다.</p>

<p>Console.log를 통해서 서버가 잘 연결되었는지 확인하였다.</p>

<p>다음으로 app에 get, post를 통해서 페이지 이동및 데이터 처리를 진행했다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">list.ejs</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
        <span class="nx">dbcon</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">'</span><span class="s1">select * from test</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> 
                <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">ejs</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="p">{</span>
                    <span class="na">data</span> <span class="p">:</span> <span class="nx">results</span>
                <span class="p">}))</span> 
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">})</span></code></pre></figure>

<p><strong>get</strong> 방식으로 list.ejs 파일을 가져온뒤, 쿼리문을 통해 테이블 데이터를 조회한다. 
여기서 ejs는 간단하게 얘기하면 JavaScript가 내장된 HTML 파일이다.
HTML 문법에 <strong>&lt;% %&gt;</strong> 식으로 사용해 데이터를 처리할수 있다.</p>

<p><img width="1728" alt="스크린샷 2021-12-11 오후 2 54 36" src="https://user-images.githubusercontent.com/58337935/145665924-307b9abe-f021-4f35-9bb5-4eb59810c9bb.png" /></p>

<p>node index.js를 입력해 서버를 실행시시면 DB 데이터가 조회된다.</p>

<p>조회까지 성공적으로 작성되었다면 , 추가,수정,삭제처리는 어렵지 않다.</p>

<p>다음으로 데이터 삭제 처리이다.</p>

<p>마찬가지로 삭제도 <strong>get</strong> 으로 진행한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/delete/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">dbcon</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">'</span><span class="s1">delete from test where id=?</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">delete success</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span></code></pre></figure>

<p><strong>req.params.id</strong> 값을 가져와 쿼리 WHERE문의 ? 을 채워준다.</p>

<p>쿼리문이 성공적으로 실행되었으면 redirect로 원래화면으로 돌아간다.</p>

<p><img width="1728" alt="스크린샷 2021-12-11 오후 3 02 22" src="https://user-images.githubusercontent.com/58337935/145666111-9960df31-2a6d-40b4-b000-d333cbdb099b.png" /></p>

<p>데이터 하나가 삭제된것을 확인할 수 있다.</p>

<p>추가 , 수정은 값을 받아와야되기 때문에 __post__도 작성해줘야한다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/insert</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">insert.html</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="p">})</span>

<span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/insert</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span>

    <span class="nx">dbcon</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">'</span><span class="s1">insert into test(id, pwd) values(?,?);</span><span class="dl">'</span><span class="p">,[</span>
        <span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="nx">body</span><span class="p">.</span><span class="nx">pwd</span>
    <span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>

<span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/edit/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">edit.ejs</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">dbcon</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">'</span><span class="s1">select * from test where id = ?</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">ejs</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="p">{</span>
          <span class="na">data</span><span class="p">:</span> <span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="p">}))</span>
      <span class="p">})</span>
    <span class="p">})</span>
  <span class="p">})</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/edit/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span>

    <span class="nx">dbcon</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="dl">'</span><span class="s1">update test set pwd=? where id=? </span><span class="dl">'</span><span class="p">,[</span><span class="nx">body</span><span class="p">.</span><span class="nx">pwd</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>

<span class="p">})</span></code></pre></figure>

<p>body-Parser 모듈을 사용했기 때문에 , body 값을 가져와</p>

<p>쿼리문을 실행해준다.</p>

<p><img width="1728" alt="스크린샷 2021-12-11 오후 3 06 35" src="https://user-images.githubusercontent.com/58337935/145666233-acf90dfb-b543-4511-816f-fd7cde9c7bab.png" /></p>

<p>추가시, ID , PWD 값을 입력후, 추가버튼을 클릭학게되면,</p>

<p><strong>post</strong> 로 데이터값을 가져와 데이터베이스에 저장해준다.</p>

<p><img width="1728" alt="스크린샷 2021-12-11 오후 3 06 54" src="https://user-images.githubusercontent.com/58337935/145666267-5f56dded-9ffd-4595-991e-75b933c082bb.png" /></p>

<p>다음과같이 데이터가 추가 된것을 확인할 수 있다.</p>

<p><img width="1728" alt="스크린샷 2021-12-11 오후 3 09 46" src="https://user-images.githubusercontent.com/58337935/145666301-1b906ac3-7ed6-4909-8c7c-16912948db0a.png" /></p>

<p>수정시 , ID 값은 수정할수 없게 disabled 처리를 하였다.
PWD 를 수정후 , 수정 버튼 을 클릭시</p>

<p><img width="1728" alt="스크린샷 2021-12-11 오후 3 11 19" src="https://user-images.githubusercontent.com/58337935/145666348-df7c5ed7-e16e-472f-a241-e20fbdeba59c.png" /></p>

<p>다음과같이 PWD가 수정된것을 확인할 수 있다.</p>

<p>이렇게 간단하게 Node.js를 이용하여 DB연결, CRUD를 구현해보았다.</p>

<p>공부를 하면서 그렇게 어려움을 느끼지 못했다.</p>

<p>에러가 떴다고 하면 오타정도..?</p>

<p>보는거과 같이 소스가 매우간결하고 JavaScript 위주이다 보니  좀만 더 신경쓰고 공부하다보면 금방 적응할수 있을꺼 같다.</p>
:ET