I"l<p>그동안 <strong>Vuetify</strong> 를 이용한 사내 프로잭트를 진행하면서, 공부와 업무를 동시에 진행을 하다보니 시간이 많이 흘렀다.. 그래도 시간을내서 그동안 공부했던거를 정리하는게 맞기때문에 이번엔 Vue.js 문법을 정리해보았다.</p>

<h3 id="뷰-인스턴스">뷰 인스턴스</h3>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">nes</span> <span class="nx">Vue</span><span class="p">();</span></code></pre></figure>

<p><strong>new Vue();</strong> 로 시작하니 코딩을 하는 사람이라면 매우 익숙할것이다.
이건은 새로운 인스턴스를 생성한다는 뜻이다. 이 인스턴스에서 사용할수 있는 속성과 API는 다음과 같다.</p>

<ol>
  <li>el; // 인스턴스가 그려지는 화면의 시작점 (특정 html 태그)</li>
  <li>template; // 화면에 표시할 요소 (html, css 등)</li>
  <li>date: // 뷰의 반응성 Reactivity 반영속성</li>
  <li>method: // 화면의 동작과 이벤트 로직 제어 메소드</li>
  <li>created: // 뷰의 라이프사이클 속성</li>
  <li>watch : // data에 정의한 속성이 변화했을때 추가동작 수행하게 해주는 속성</li>
</ol>

<p>이를 사용하는 예제는 다음과 같다.</p>

<p><img width="336" alt="스크린샷 2022-01-30 오후 3 50 11" src="https://user-images.githubusercontent.com/58337935/151689848-b8c5b5d6-aa38-48cc-ac40-e5c5e6cd1bbc.png" /></p>

<p>VSCODE 에서 Vue 를 사용하게 되면 다음과같은 설정으로 시작하게 된다.</p>

<h3 id="전역컴포넌트--전역컴포넌트">전역컴포넌트 , 전역컴포넌트</h3>
<p>Vue 의 장점으로 꼽히는 <strong>Component</strong> 이다.
이 <strong>Component</strong> 를 모든 페이지에서 사용을 할것인지 , 특정 페이지에서 사용할지는 사용자가 선택할수 있다.</p>

<p>다음은 지역컴포넌트 설정방법이다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">new</span> <span class="nx">Vue</span> <span class="p">({</span>
    <span class="na">component</span> <span class="p">:</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 <strong>component</strong> 를 선언해준뒤 사용하자하는 기능을 등록시켜주면 등록한 페이지에서만 사용이 가능하다.</p>

<p>다음은 전역컴포넌트의 설정방법이다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="dl">'</span><span class="s1">my-component</span><span class="dl">'</span><span class="p">,{</span>
    <span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">전역컴포넌트 사용</span><span class="dl">'</span>
<span class="p">});</span></code></pre></figure>

<h3 id="뷰의-라이프사이클">뷰의 라이프사이클</h3>

<p><img src="https://user-images.githubusercontent.com/58337935/151690027-59a87b73-4472-46b6-9008-e8004b5a7350.png" alt="vue_lifecycle_uoayop" /></p>

<p><strong>‘뷰 라이프사이클’</strong> 이라고 검색을하게 되면 많이 보게 되는 이미지이다.</p>

<p>위의 이미지는 인스턴스 생성 - 부착 - 소멸까지의 전체적인 흐름을 보여주는 다이어그램이다.</p>

<p>라이프사이클은 크게 4가지로 나뉘게 된다.</p>

<ol>
  <li>인스턴스 생성</li>
  <li>인스턴스 화면에 부착</li>
  <li>인스턴스 내용 갱신</li>
  <li>인스턴스 소멸</li>
</ol>

<p>위 이미지에서 사용하는 메소드에 관련해 간단하게 정리해보았다.</p>

<p>• beforeCreate = 인스턴스 생성되고 가장 처음 실행되는 메소드
• created = data, method 속성이 인스턴스 정의 / 정의된 갑셍 접근해 로직 실행
• beforeMount = template 속성에 지정한 마크업 속성을 render() 함수 변환후 인스턴스 부착전 호출
• mounted = 인스턴스가 화면에 부착되고나면 호출 
• beforeUpdate = 데이터가 변경되면 화면을 다시 그리기전에 호출 
• updated = 데이터 변경후, 화면을 그리고 나면 실행 // 데이터 변경 후 제어로직 추가하기 좋음
• beforeDestroy = 소멸직전 호출 
• destroyed = 소멸후 호출 // 정의한 속성 , 하위 인스턴스 또한 모두 파괴</p>

<p>다음은 컴포넌트간의 통신 규칙에 대해 정리를 해보도록 하겠다.</p>
:ET