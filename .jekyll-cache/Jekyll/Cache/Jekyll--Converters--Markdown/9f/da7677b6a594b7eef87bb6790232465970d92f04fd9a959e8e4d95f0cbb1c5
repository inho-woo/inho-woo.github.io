I"<p>이번에는 Vue.js 컴포넌트 통신 규칙에 대해 정리를 해보았다.</p>

<h3 id="컴포넌트-통신-규칙이-필요한-이유">컴포넌트 통신 규칙이 필요한 이유</h3>
<p>Vue 는 컴포넌트로 화면을 구성하기 때문에 같은 웹 페이지더라도 데이터를 공유할수 없다.
컴포넌트마다 각자 고유한 <strong>Scope</strong> 를 가지고 있기 때문에, 서로 데이터를 주고 받기 위해서는 Vue에서 제공하는 데이터 전달 규칙을 따라야 한다.</p>

<h3 id="그러면-어떻게-서로-데이터를-주고받을까">그러면 어떻게 서로 데이터를 주고받을까?</h3>
<p>우선은 상위 , 하위 컴포넌트로 나눈뒤, 방향에 따라 문법이 달라지게 된다.
상위에서 하위로 갈때에는 <strong>props</strong> 속성을 이용하여 데이터를 전달한다.</p>

<p>반대로 하위에서 상위로 갈때에는 <strong>이벤트</strong> 를 발생해 데이터를 전달한다.</p>

<p>먼저 <strong>props</strong> 를 설정하는 방법이다.
상,하위를 구분짓기 위해 부모,자식 컴포넌트로 정의하였다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="dl">'</span><span class="s1">child-component</span><span class="dl">'</span><span class="p">,{</span>
<span class="na">props</span><span class="p">:[</span><span class="dl">'</span><span class="s1">props속성이름</span><span class="dl">'</span><span class="p">]</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 <strong>component</strong> 를 선언해준뒤 사용하자하는 기능을 등록시켜주면 등록한 페이지에서만 사용이 가능하다.</p>

<p>다음은 전역컴포넌트의 설정방법이다.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="dl">'</span><span class="s1">my-component</span><span class="dl">'</span><span class="p">,{</span>
    <span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">전역컴포넌트 사용</span><span class="dl">'</span>
<span class="p">});</span></code></pre></figure>

<h3 id="뷰의-라이프사이클">뷰의 라이프사이클</h3>

<p><img src="https://user-images.githubusercontent.com/58337935/151690027-59a87b73-4472-46b6-9008-e8004b5a7350.png" alt="vue_lifecycle_uoayop" /></p>

<p><strong>‘뷰 라이프사이클’</strong> 이라고 검색을하게 되면 많이 보게 되는 이미지이다.</p>

<p>위의 이미지는 인스턴스 생성 - 부착 - 소멸까지의 전체적인 흐름을 보여주는 다이어그램이다.</p>

<p>라이프사이클은 크게 4가지로 나뉘게 된다.</p>

<ol>
  <li>인스턴스 생성</li>
  <li>인스턴스 화면에 부착</li>
  <li>인스턴스 내용 갱신</li>
  <li>인스턴스 소멸</li>
</ol>

<p>위 이미지에서 사용하는 메소드에 관련해 간단하게 정리해보았다.</p>

<ol>
  <li>beforeCreate = 인스턴스 생성되고 가장 처음 실행되는 메소드a</li>
  <li>created = data, method 속성이 인스턴스 정의 / 정의된 갑셍 접근해 로직 실행</li>
  <li>beforeMount = template 속성에 지정한 마크업 속성을 render() 함수 변환후 인스턴스 부착전 호출</li>
  <li>mounted = 인스턴스가 화면에 부착되고나면 호출</li>
  <li>beforeUpdate = 데이터가 변경되면 화면을 다시 그리기전에 호출</li>
  <li>updated = 데이터 변경후, 화면을 그리고 나면 실행 // 데이터 변경 후 제어로직 추가하기 좋음</li>
  <li>beforeDestroy = 소멸직전 호출</li>
  <li>destroyed = 소멸후 호출 // 정의한 속성 , 하위 인스턴스 또한 모두 파괴</li>
</ol>

<p>다음은 컴포넌트간의 통신 규칙에 대해 정리를 해보도록 하겠다.</p>
:ET